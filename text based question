import tkinter as tk
from tkinter import Scrollbar, Text
from transformers import BertForQuestionAnswering, BertTokenizer

# Load the pre-trained QA model and tokenizer
model_name = "bert-large-uncased-whole-word-masking-finetuned-squad"
tokenizer = BertTokenizer.from_pretrained(model_name)
model = BertForQuestionAnswering.from_pretrained(model_name)

# Create a Tkinter GUI
root = tk.Tk()
root.title("Text-based Question Answering")

# Text Entry
text_label = tk.Label(root, text="Context Text:")
text_label.pack()
context_text = Text(root, height=10, width=60)
context_text.pack()

# Scrollbar for the text entry
scrollbar = Scrollbar(context_text)
scrollbar.pack(side="right", fill="y")
context_text.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=context_text.yview)

# Question Entry
question_label = tk.Label(root, text="Question:")
question_label.pack()
question_input = tk.Entry(root, width=60)
question_input.pack()

# Answer Display
answer_label = tk.Label(root, text="Answer:")
answer_label.pack()
answer_display = tk.Label(root, text="")
answer_display.pack()

# Function to perform question answering
def answer_question():
    context = context_text.get("1.0", "end-1c")
    question = question_input.get()
    input_dict = tokenizer.encode_plus(question, context, return_tensors="pt", max_length=512)
    start_scores, end_scores = model(**input_dict)

    # Find the most likely answer
    start_idx = start_scores.argmax()
    end_idx = end_scores.argmax()
    answer = tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(input_dict["input_ids"][0][start_idx:end_idx+1]))

    # Display the answer
    answer_display.config(text=answer)

# Button to trigger question answering
answer_button = tk.Button(root, text="Answer", command=answer_question)
answer_button.pack()

# Run the Tkinter main loop
root.mainloop()

