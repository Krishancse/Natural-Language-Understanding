import torch
from transformers import BertForSequenceClassification, BertTokenizer, Trainer, TrainingArguments

# Load pre-trained model and tokenizer
model_name = "bert-base-uncased"
tokenizer = BertTokenizer.from_pretrained(model_name)
model = BertForSequenceClassification.from_pretrained(model_name)

# Prepare your dataset (replace with your dataset loading code)
train_dataset = ...
eval_dataset = ...

# Define training arguments
training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=3,
    per_device_train_batch_size=32,
    per_device_eval_batch_size=64,
    save_steps=1000,
    evaluation_strategy="steps",
    logging_dir="./logs",
)

# Create a Trainer instance
trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=None,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
)

# Fine-tune the model
trainer.train()

# Evaluate the model
results = trainer.evaluate()

# Save the fine-tuned model
model.save_pretrained("./fine-tuned-model")
